import itertools
import time
import os
import design

UA_Size = 16
NR_UA = 4096
NR_UA_FAT = 512

NR_UA_ROOT = 64
NAME = 8
EXT = 3
DIM = 2
START_UA = 2
FLAG = 1

NUM = [0,1,2,3,4,5,6,7,8,9]
ALPHA = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
HEX = []

HDD = [[0 for j in range (UA_Size)]for i in range(NR_UA)]
FAT=[0 for i in range(NR_UA)]
ROOT = [[' ' for j in range(UA_Size)] for i in range(NR_UA_ROOT)]



#FAT
def freeUA():
    for i in range(NR_UA):
        if(FAT[i]==0):
            return  i
    return -1



def initFat(matrix):
    for i in range(NR_UA):
        if i < NR_UA_FAT:
            FAT[i] = 1
        elif i < NR_UA_FAT+NR_UA_ROOT:
            FAT[i] = 2
        elif i < NR_UA:
            FAT[i] = 0




def printFat(matrix):
    elem = ''
    spacedElem = ''
    for i, element in enumerate(matrix):
        elem +=str(element)
        if i % 16 == 0:
            spacedElem = " ".join(elem)
            print(spacedElem)
            print()
            spacedElem=''
            elem = ''


def updateFat(change_ua,value):
	FAT[change_ua] = value;


def fatOnHDD():
    convertedFAT = sliced2BytesList(FAT)
    counter = 0
    for i in range(NR_UA_FAT):
        for j in range(UA_Size):
            HDD[i][j] = convertedFAT[counter]
            counter+=1



def countFreeMemory():
    counter = 0
    for i in range(len(FAT)):
        if FAT[i] == 0:
            counter+=1
    return counter

#
##
###ROOT
##
#

def printRoot():
    freeCounter = 0
    nume = []
    extensie = []
    marime = []
    inceput = []
    steag = []
    for row in ROOT:
        if row[0] != ' ':
            nume  = row[0:8]
            extensie = row[8:11]
            marime = row [11:13]
            inceput = row [13:15]
            steag = row [15:16]
            print(f"Nume: {fromBytesToTxt(nume)}\tExtensie: {fromBytesToTxt(extensie)}\tMarime: {from2BytesToNumbers(marime)}"
                  f"\tUA_Inceput: {from2BytesToNumbers(inceput)}\tFlag: {fromBytesToNumbers(steag)}")

    for row in ROOT:
        if row[0] == ' ':
            freeCounter+=1
            if freeCounter == 64:
                print("The root is empty")



def freeOnRoot():
    for i in range(NR_UA_ROOT):
        for j in range(UA_Size):
            if ROOT[i][j] == ' ':
                return i
    return -1



def insertInRoot(name,ext,size,startUA,flag):
    '''parametrii trebuie sa fie liste'''
    real_name = name
    if len(real_name) > 8:
        print("Name size out of bounds")
        exit(1)
    if len(real_name)<8:
        for i in range(len(real_name),8):
            real_name.append(" ")

    name1 = sliceBytesList(real_name)
    ext1 = sliceBytesList(ext)
    size1 = sliced2BytesList(size)
    startUA1 = sliced2BytesList(startUA)
    flag1 = sliceBytesList(flag)

    data = name1 + ext1 + size1 + startUA1 + flag1

    free = freeOnRoot()
    availableMemory = countFreeMemory()
    #error handler
    if availableMemory < size[0]:
        print(f"There are only {availableMemory + 16} bytes free.")

    if free == -1:
        print("The root is full")
        exit(1)

    for i in range(UA_Size):
        ROOT[free][i] = data[i]

    rootOnHDD()



def rootOnHDD():
    counter = 0
    for i in range(NR_UA_FAT,NR_UA_FAT+NR_UA_ROOT):
        for j in range(UA_Size):
            HDD[i][j] = ROOT[counter][j]
        counter+=1

#
##
###HDD
##
#
def printHDD():
    for row in HDD:
        print(row)



def uploadOnHDD(data):
    data_size = len(data)
    to_bytes = sliceBytesList(data)
    data_slices = [to_bytes[i:i+UA_Size] for i in range(0,data_size,UA_Size)]
    counter = 0
    for i, slice_data in enumerate(data_slices):
        col = 0
        UA = freeUA()
        for j,byte in enumerate(slice_data):
            HDD[UA][col] = byte
            col +=1
            counter +=1
            if counter == len(to_bytes):
                FAT[UA] = 3
            if col == 16:
                col = 0
                FAT[UA] = '?'
                nextUA = freeUA()
                updateFat(UA,nextUA)






#
##
###DATA MANIPULATION
##
#

#convert to 2 bytes

#converts one int/character in 2 bytes
def convertTo2Bytes(data):
    if isinstance(data, int):
        convertion  = bin(data)[2:]
        output= convertion.zfill(16)
        return output
    elif isinstance(data, str):
        ascii_code = ord(data)
        convertion = bin(ascii_code)[2:]
        output = convertion.zfill(16)
        return  output


#converts a list of elements into bytes
def convertList2Bytes(data):
    convertedElement = ""
    fullData = ""
    for i in data:
        convertedElement = convertTo2Bytes(i)
        fullData += convertedElement

    return fullData


#converts a list of elements into bytes and returns a sliced version
def sliced2BytesList(some_list):
    ''' converts a list of elements into bytes and returns a sliced version '''
    convertedList = convertList2Bytes(some_list)
    secondList = []
    for i in range(0, len(convertedList), 8):
        substring = convertedList[i:i+8]
        secondList.append(substring)
    return secondList




#convert to single byte

def convertToByte(data):
    if isinstance(data, int):
        convertion  = bin(data)[2:]
        output= convertion.zfill(8)
        return output
    elif isinstance(data, str):
        ascii_code = ord(data)
        convertion = bin(ascii_code)[2:]
        output = convertion.zfill(8)
        return  output


#converts a list of elements into bytes -> used in sliceBytesList
def convertListToBytes(data):
    convertedElement = ""
    fullData = ""
    for i in data:
        convertedElement = convertToByte(i)
        fullData += convertedElement

    return fullData

def sliceBytesList(some_list):
    ''' converts a list of elements into bytes and returns a sliced version '''
    convertedList = convertListToBytes(some_list)
    secondList = []
    for i in range(0, len(convertedList), 8):
        substring = convertedList[i:i+8]
        secondList.append(substring)
    return secondList


#convert the bytes to TXT/NR

def fromBytesToTxt(some_list):
    characters = ""
    for i in range(len(some_list)):
        integer = (int(some_list[i], 2))
        character = chr(integer)
        characters += character
    return characters

def fromBytesToNumbers(some_list):
    characters = ""
    for i in range(len(some_list)):
        integer = (int(some_list[i], 2))
        characters += str(integer)
    return characters


def from2BytesToNumbers(some_list):
    characters = ""
    element = ""
    for i in range(0, len(some_list), 2):
        element = some_list[i]+some_list[i+1]
        integer = int(element, 2)
        characters += str(integer)
        element = ""
    return characters





#
##
###FUNCTII USER
##
#
available_commands = '''commands - this command.
help 'command name' 
create - creates a file
del - deletes a file
ls - prints all available files
exit - exits the system'''
commands_dict = {"create":"create -> creates a new file.\nThe arguments it needs are: 'file_name'.'extension' 'size'(int) 'file_type'(NUM,ALPHA) 'flag'(1,0)-optional\nValid 'create' command: create file.txt 12 NUM",
                 "del": "del -> deletes an existing file.\nThe arguments it needs are: 'file_name'\nValid 'def' command: del file",
                 "ls":"Prints all the available files.",
                 "exit":"exits the system",
                 }
def processUserInput():
    user_input = input("root@tmpt~: ")
    command_parts = user_input.split()
    command = command_parts[0].lower()
    if command == "create":
        file = command_parts[1]
        file = file.split(".")
        file_name = file[0]
        file_ext = file[1]
        size = int(command_parts[2])
        type = command_parts[3].lower()
        if len(command_parts) < 5:
            flag = 0
        else:
            flag = int(command_parts[4])
        CreateFile(file_name, file_ext, size, type, flag)
    elif command == "read":
        file_name = command_parts[1]
        ReadFile(file_name)
    elif command == "del":
        file_name = command_parts[1]
        DeleteFile(file_name)
    elif command =="ls":
        printRoot()
    elif command == "exit":
        exitSystem()
    elif command == "commands":
        print(available_commands)
        print("~You can type help 'command name' for more information about a command~")
    elif command == "help":
        search_command = command_parts[1]
        print(commands_dict[search_command])
    else:
        print("Enter a valid command")
        print("~Type 'commands' to see a list of all available commands.~")









#CREATE fis1.txt 25 -ALFA
def CreateFile(name, extension, size, type,flag):
    #1. creare lista de date
    elements_list = []
    lista_in_bytes = []
    if type == "alpha":
        elements_list = ALPHA
    elif type == "num":
        elements_list = NUM

    repeated_lst = itertools.cycle(elements_list)
    result = [next(repeated_lst) for _ in range(size)]
    #2. inserare in ROOT
    name1 = list(name)
    extension1 = list(extension)
    size1 = [size]
    flag1 = [flag]
    startingUA = freeUA()
    startingUA1=[startingUA]
    insertInRoot(name1,extension1,size1,startingUA1,flag1)
    rootOnHDD()
    #3. Upload On HDD the data
    uploadOnHDD(result)
    print("File created succesfully")


#Functie folosita doar in DeleteFile
def find_name_index(matrix,lst):
    '''find a list of strings in a matrix'''
    for i, row in enumerate(matrix):
        if set(lst).issubset(set(row)):
            return i
    return -1

def DeleteFile(file_name):
    #1. free the FAT
    addresses_list = []
    next_address = 0
    found_on_row = -1
    name_as_list = list(file_name)
    delete_name = sliceBytesList(name_as_list)
    found_on_row = find_name_index(ROOT,delete_name)
    if found_on_row == -1:
        print("File not found.")
    else:
        address_in_bytes = ROOT[found_on_row][13:15]
        address = int(from2BytesToNumbers(address_in_bytes))
        #if file stored on one UA
        if FAT[address] == 3:
            #free the FAT
            FAT[address] = 0
            print("FAT was cleared")
            fatOnHDD()
            #free the HDD
            for i in range(len(HDD[address])):
                HDD[address][i]= 0

            #Free the Root
            for i in range(len(ROOT[found_on_row])):
                ROOT[found_on_row][i] = ' '
            print(f"~File '{file_name}' deleted.~")
            rootOnHDD()
        else:
            #if file stored on more UA
            while FAT[address] != 3:
                addresses_list.append(address)
                addresses_list.append(FAT[address])
                next_address = FAT[address]
                address = next_address
            if FAT[address] == 3:
                addresses_list.append(address)
            #free FAT and HDD
            for i in range(len(addresses_list)):
                FAT[addresses_list[i]] = 0
                for j in range(len(HDD[addresses_list[i]])):
                    HDD[addresses_list[i]][j] = 0
            #free the ROOT
            for i in range(len(ROOT[found_on_row])):
                ROOT[found_on_row][i] = ' '
            fatOnHDD()
            rootOnHDD()
            print(f"~File '{file_name}' deleted.~")




def ReadFile(file_name):
    addresses_list = []
    byte = '00000000'
    message = []
    decode_way = ""
    decoded_message = ""
    next_address = 0
    found_on_row = -1
    name_as_list = list(file_name)
    read_file = sliceBytesList(name_as_list)
    found_on_row = find_name_index(ROOT, read_file)
    if found_on_row == -1:
        print("File not found.")
    else:
        address_in_bytes = ROOT[found_on_row][13:15]
        address = int(from2BytesToNumbers(address_in_bytes))
        # if file stored on one UA
        #eliminare dubluri
        if FAT[address] == 3:
            addresses_list.append(address)
            for i in range(len(HDD[address])):
                #conversie din bytes in txt sau num
                if HDD[address][i] != 0:
                    message.append(HDD[address][i])
                    if i == 0:
                        if HDD[address][i] == byte:
                            decode_way = "num"
                        else:
                            decode_way = "alpha"
            if decode_way == "num":
                decoded_message = " ".join(fromBytesToNumbers(message))
                print(decoded_message)
            else:
                decoded_message = " ".join(fromBytesToTxt(message))
                print(decoded_message)


        else:
            # if file stored on more UA
            while FAT[address] != 3:
                addresses_list.append(address)
                addresses_list.append(FAT[address])
                next_address = FAT[address]
                address = next_address
            if FAT[address] == 3:
                addresses_list.append(address)

            new_list = []
            for i in addresses_list:
                if i not in new_list:
                    new_list.append(i)
            addresses_list = new_list


            for i in range(len(addresses_list)):
                for j in range(len(HDD[addresses_list[i]])):
                    if HDD[addresses_list[i]][j] != 0:
                        message.append(HDD[addresses_list[i]][j])
            if HDD[addresses_list[0]][0] == byte:
                decode_way = "num"
            else:
                decode_way = "alpha"
            if decode_way == "num":
                decoded_message = " ".join(fromBytesToNumbers(message))
                print(decoded_message)
            else:
                decoded_message = " ".join(fromBytesToTxt(message))
                print(decoded_message)



def RenameFile():
    print()

def CopyFile():
    print()

#
##
### System Functions
##
#



def initSystem():
    initFat(FAT)
    fatOnHDD()
    rootOnHDD()
    print(design.logo)
    print("~Type 'commands' to see a list of all available commands.~")


def exitSystem():
    wrong_input = True
    while wrong_input:
        verify = (input("Are you sure you want to shut down the system? Y/N"))
        if verify.lower() == 'y':
            print("System shutting down. Goodbye!")
            time.sleep(3)
            exit(1)
        elif verify.lower() == 'n':
            print("Command canceled")
            wrong_input = False
        else:
            print("Write 'y' to confirm or 'n' to cancel.")


#START MAIN
initSystem()
while True:
    processUserInput()

#END MAIN
